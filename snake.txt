# xxx
# imports
import turtle
import time
import random
import pygame


pygame.mixer.init()

delay = 0.1

Score = 0
high_score = 0

segments = []



pygame.mixer.music.load('bgmzc.mp3')
pygame.mixer.music.play(-1)
pygame.mixer.music.set_volume(0.1)

# set up screen
wn = turtle.Screen()
wn.title("Snake Game")

wn.bgpic('bkcg.gif')
wn.setup(width=600, height=600)
wn.tracer(0)


# snake head
head = turtle.Turtle()
head.speed(0)
head.shape("square")
head.color("yellow")
head.penup()
head.goto(0, 0)
head.direction = "stop"

# snake food
food = turtle.Turtle()
food.speed(0)
food.shape("circle")
food.color("red")
food.penup()
# food.ht()
food.goto(0, 200)
# food.st()


# scoreboards
sc = turtle.Turtle()
sc.speed(0)
sc.shape("square")
sc.color("black")
sc.penup()
sc.hideturtle()
sc.goto(0, -260)
sc.write("Score: 0  High score: 0", align="center", font=("candara", 24, "bold"))


# Functions
def go_up():
    if head.direction != "down":
        head.direction = "up"


def go_down():
    if head.direction != "up":
        head.direction = "down"


def go_left():
    if head.direction != "right":
        head.direction = "left"


def go_right():
    if head.direction != "left":
        head.direction = "right"


def move():
    if head.direction == "up":
        y = head.ycor()
        head.sety(y + 20)
    if head.direction == "down":
        y = head.ycor()
        head.sety(y - 20)
    if head.direction == "left":
        x = head.xcor()
        head.setx(x - 20)
    if head.direction == "right":
        x = head.xcor()
        head.setx(x + 20)


# keyboard bindings/ event handling
wn.listen()
wn.onkey(go_up, "Up")
wn.onkey(go_down, "Down")
wn.onkey(go_left, "Left")
wn.onkey(go_right, "Right")


# MainLoop
while True:
    wn.update()  # this is to update the screen regularly





    # check collision with border area
    if head.xcor() > 290 or head.xcor() < -290 or head.ycor() > 290 or head.ycor() < -290:
        b=pygame.mixer.Sound('Glass Windows Crashing.mp3')
        b.play()


        time.sleep(1)
        head.goto(0, 0)
        head.direction = "stop"


        # hide the segments of body
        for segment in segments:
            segment.goto(1000, 1000)  # out of range
        # clear the segments
        segments.clear()

        # reset score
        Score = 0

        # reset delay
        delay = 0.1

        sc.clear()
        sc.write("Score: {}  High score: {}".format(Score, high_score), align="center", font=("candara", 24, "bold"))

    # check collision with food
    if head.distance(food) < 20:
        qwe=pygame.mixer.Sound('Wood Bat Falling in Dirt.mp3')
        qwe.play()
        # move the food to random place
        x = random.randint(-290, 290)
        y = random.randint(-290, 290)
        food.goto(x, y)

        # add a new segment to the head
        new_segment = turtle.Turtle()
        new_segment.speed(0)
        new_segment.shape("square")
        new_segment.color("orange")
        new_segment.penup()
        segments.append(new_segment)

        # shorten the delay
        delay -= 0.001  # decreasing delay means to increase speed of snake
        # increase the score
        Score += 10

        if Score > high_score:
            high_score = Score
        sc.clear()
        sc.write("Score: {}  High score: {}".format(Score, high_score), align="center", font=("candara", 24, "bold"))

        # move the segments in reverse order
    for index in range(len(segments) - 1, 0, -1):
        x = segments[index - 1].xcor()
        y = segments[index - 1].ycor()
        segments[index].goto(x, y)
    # move segment 0 to head
    if len(segments) > 0:
        x = head.xcor()
        y = head.ycor()
        segments[0].goto(x, y)

    move()

    # check for collision with body
    for segment in segments:
        if segment.distance(head) < 20:
            b = pygame.mixer.Sound('Glass Windows Crashing.mp3')
            b.play()
            time.sleep(1)
            head.goto(0, 0)
            head.direction = "stop"

            # hide segments
            for segment in segments:
                segment.goto(1000, 1000)
            segments.clear()
            Score = 0
            delay = 0.1

            # update the score
            sc.clear()
            sc.write("Score: {}  High score: {}".format(Score, high_score), align="center",
                     font=("candara", 24, "bold"))
    time.sleep(delay)


turtle.done()
